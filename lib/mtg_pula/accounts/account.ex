defmodule MtgPula.Accounts.Account do
  @moduledoc """
  Represents an account schema.

  This schema is used to store account-related information, such as email and hashed passwords.

  ## Fields

  - `id` (binary_id): The unique identifier for the account (autogenerated).
  - `email` (string): The email address associated with the account.
  - `hash_password` (string): The hashed password for the account.
  - `inserted_at` (utc_datetime): The timestamp when the account was created.
  - `updated_at` (utc_datetime): The timestamp when the account was last updated.

  ## Relationships

  - `has_one :user`: Each account is associated with one user. See [`User Schema`](MtgPula.Users.User.html).

  ## Validations

  - `email`: Must be present, unique, and formatted correctly (must include an `@` and no spaces).
  - `hash_password`: Must be present and hashed before saving.

  ## Examples

      # Creating a new account
      attrs = %{email: "test@example.com", hash_password: "password123"}
      changeset = MtgPula.Accounts.Account.changeset(%MtgPula.Accounts.Account{}, attrs)

      if changeset.valid? do
        Repo.insert(changeset)
      else
        IO.inspect(changeset.errors)
      end
  """

  use Ecto.Schema
  import Ecto.Changeset

  @optional_fields [:id, :inserted_at, :updated_at]
  @primary_key {:id, :binary_id, autogenerate: true}
  @foreign_key_type :binary_id

  schema "accounts" do
    field :email, :string
    field :hash_password, :string
    has_one :user, MtgPula.Users.User
    timestamps(type: :utc_datetime)
  end


  defp all_fields do
    __MODULE__.__schema__(:fields)
  end

  @doc """
  Creates a changeset for an account.

  ## Parameters

  - `account` (struct): The account struct to update.
  - `attrs` (map): A map of attributes to apply to the changeset.

  ## Validations

  - `email`: Must be present, unique, and formatted correctly (must include an `@` and no spaces).
  - `hash_password`: Must be present and hashed before saving.

  ## Examples

      iex> changeset(%MtgPula.Accounts.Account{}, %{email: "test@example.com", hash_password: "password123"})
      %Ecto.Changeset{...}

      iex> changeset(%MtgPula.Accounts.Account{}, %{email: nil})
      %Ecto.Changeset{valid?: false, errors: [email: {"can't be blank", []}]}
  """
  def changeset(account, attrs) do
    account
    |> cast(attrs, all_fields())
    |> validate_required(all_fields() -- @optional_fields)
    |> validate_format(:email, ~r/^[^\s]+@[^\s]+$/, message: "must have @ sign and no spaces")
    |> validate_length(:email, max: 160)
    |> unique_constraint(:email)
    |> put_password_hash()
  end


  defp put_password_hash(
         %Ecto.Changeset{valid?: true, changes: %{hash_password: hash_password}} = changeset
       ) do
    change(changeset, hash_password: Bcrypt.hash_pwd_salt(hash_password))
  end

  defp put_password_hash(changeset), do: changeset
end
