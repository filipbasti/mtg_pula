defmodule MtgPula.Tournaments.Match do
  @moduledoc """
  Represents a match schema.

  This schema is used to store match-related information, such as players, scores, and the winner.

  ## Fields

  - `id` (binary_id): The unique identifier for the match (autogenerated).
  - `round` (integer): The round number of the match.
  - `player_1_wins` (integer): The number of wins for player 1 (default: 0).
  - `player_2_wins` (integer): The number of wins for player 2 (default: 0).
  - `is_draw` (boolean): Indicates if the match ended in a draw.
  - `inserted_at` (utc_datetime): The timestamp when the match was created.
  - `updated_at` (utc_datetime): The timestamp when the match was last updated.

  ## Relationships

  - `belongs_to :on_play`: The player who is on play. See [`Player Schema`](MtgPula.Tournaments.Player.html).
  - `belongs_to :player1`: The first player in the match. See [`Player Schema`](MtgPula.Tournaments.Player.html).
  - `belongs_to :player2`: The second player in the match. See [`Player Schema`](MtgPula.Tournaments.Player.html).
  - `belongs_to :winner`: The winner of the match. See [`Player Schema`](MtgPula.Tournaments.Player.html).
  - `belongs_to :tournament`: The tournament to which the match belongs. See [`Tournament Schema`](MtgPula.Tournaments.Tournament.html).

  ## Examples

      # Creating a new match
      attrs = %{round: 1, player1_id: "player1_uuid", player2_id: "player2_uuid"}
      changeset = MtgPula.Tournaments.Match.changeset(%MtgPula.Tournaments.Match{}, attrs)

      if changeset.valid? do
        Repo.insert(changeset)
      else
        IO.inspect(changeset.errors)
      end
  """
  use Ecto.Schema
  import Ecto.Changeset

  @optional_fields [
    :id,
    :inserted_at,
    :updated_at,
    :is_draw,
    :player_1_wins,
    :player_2_wins,
    :on_play_id,
    :winner_id,
    :player2_id
  ]
  @primary_key {:id, :binary_id, autogenerate: true}
  @foreign_key_type :binary_id

  schema "matches" do
    field :round, :integer
    field :player_1_wins, :integer, default: 0
    field :player_2_wins, :integer, default: 0
    field :is_draw, :boolean

    belongs_to :on_play, MtgPula.Tournaments.Player, foreign_key: :on_play_id, type: :binary_id
    belongs_to :player1, MtgPula.Tournaments.Player, foreign_key: :player1_id, type: :binary_id
    belongs_to :player2, MtgPula.Tournaments.Player, foreign_key: :player2_id, type: :binary_id
    belongs_to :winner, MtgPula.Tournaments.Player, foreign_key: :winner_id, type: :binary_id

    belongs_to :tournament, MtgPula.Tournaments.Tournament,
      foreign_key: :tournament_id,
      type: :binary_id

    timestamps(type: :utc_datetime)
  end

  defp all_fields do
    __MODULE__.__schema__(:fields)
  end

  # Acts as a trigger to asign winner and is draw flag
  defp calculate_winner(changeset) do
    player_1_wins = get_field(changeset, :player_1_wins, 0)
    player_2_wins = get_field(changeset, :player_2_wins, 0)
    player1_id = get_field(changeset, :player1_id)
    player2_id = get_field(changeset, :player2_id)

    cond do
      # check if player 1 has more wins
      player_1_wins > player_2_wins ->
        changeset
        |> put_change(:winner_id, player1_id)
        |> put_change(:is_draw, false)

      # check if player 2 has more wins
      player_2_wins > player_1_wins ->
        changeset
        |> put_change(:winner_id, player2_id)
        |> put_change(:is_draw, false)

      # check if it is draw and game is not bye
      player_1_wins == player_2_wins and player2_id != nil ->
        changeset
        |> put_change(:winner_id, nil)
        |> put_change(:is_draw, true)

      true ->
        changeset
    end
  end

  @doc """
  Creates a changeset for a match.

  ## Parameters

  - `match` (struct): The match struct to update.
  - `attrs` (map): A map of attributes to apply to the changeset.

  ## Validations

  - Ensures required fields are present.
  - Automatically calculates the winner and draw status based on player wins.

  ## Examples

      iex> changeset(%MtgPula.Tournaments.Match{}, %{round: 1, player1_id: "player1_uuid"})
      %Ecto.Changeset{...}

      iex> changeset(%MtgPula.Tournaments.Match{}, %{round: nil})
      %Ecto.Changeset{valid?: false, errors: [round: {"can't be blank", []}]}
  """
  def changeset(match, attrs) do
    match
    |> cast(attrs, all_fields())
    |> calculate_winner()
    |> validate_required(all_fields() -- @optional_fields)
  end
end
