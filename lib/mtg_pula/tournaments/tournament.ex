defmodule MtgPula.Tournaments.Tournament do
  @moduledoc """
  Represents a tournament schema.

  This schema is used to store tournament-related information, such as name, rounds, and players.

  ## Fields

  - `id` (binary_id): The unique identifier for the tournament (autogenerated).
  - `name` (string): The name of the tournament.
  - `finished` (boolean): Indicates if the tournament is finished.
  - `current_round` (integer): The current round of the tournament.
  - `number_of_rounds` (integer): The total number of rounds in the tournament.
  - `join_code` (string): A unique code for players to join the tournament.
  - `inserted_at` (utc_datetime): The timestamp when the tournament was created.
  - `updated_at` (utc_datetime): The timestamp when the tournament was last updated.

  ## Relationships

  - `has_many :match`: The matches associated with the tournament. See [`Match Schema`](MtgPula.Tournaments.Match.html).
  - `has_many :player`: The players participating in the tournament. See [`Player Schema`](MtgPula.Tournaments.Player.html).
  - `belongs_to :user`: The user who created the tournament. See [`User Schema`](MtgPula.Users.User.html).

  ## Examples

      # Creating a new tournament
      attrs = %{name: "Summer Cup", number_of_rounds: 5}
      changeset = MtgPula.Tournaments.Tournament.changeset(%MtgPula.Tournaments.Tournament{}, attrs)

      if changeset.valid? do
        Repo.insert(changeset)
      else
        IO.inspect(changeset.errors)
      end
  """
  use Ecto.Schema
  import Ecto.Changeset
  @optional_fields [:id, :inserted_at, :updated_at, :current_round, :join_code]
  @primary_key {:id, :binary_id, autogenerate: true}
  @foreign_key_type :binary_id
  schema "tournaments" do
    field :name, :string
    field :finished, :boolean
    field :current_round, :integer
    field :number_of_rounds, :integer
    field :join_code, :string
    has_many :match, MtgPula.Tournaments.Match
    has_many :player, MtgPula.Tournaments.Player

    timestamps(type: :utc_datetime)

    belongs_to :user, MtgPula.Users.User
  end

  defp all_fields do
    __MODULE__.__schema__(:fields)
  end

  @doc """
  Creates a changeset for a tournament.

  ## Parameters

  - `tournament` (struct): The tournament struct to update.
  - `attrs` (map): A map of attributes to apply to the changeset.

  ## Validations

  - Ensures required fields are present.
  - Generates a unique join code if not provided.

  ## Examples

      iex> changeset(%MtgPula.Tournaments.Tournament{}, %{name: "Summer Cup"})
      %Ecto.Changeset{...}

      iex> changeset(%MtgPula.Tournaments.Tournament{}, %{name: nil})
      %Ecto.Changeset{valid?: false, errors: [name: {"can't be blank", []}]}
  """
  def changeset(tournament, attrs) do
    tournament
    |> cast(attrs, all_fields())
    |> validate_required(all_fields() -- @optional_fields)
    |> put_join_code()
    |> unique_constraint(:join_code)
    |> assoc_constraint(:user)
  end

  defp put_join_code(changeset) do
    if get_field(changeset, :join_code) do
      changeset
    else
      changeset
      |> put_change(:join_code, generate_unique_code())
    end
  end

  defp generate_unique_code do

    :crypto.strong_rand_bytes(4)
    |> Base.encode16()
    |> binary_part(0, 6)
  end
end
