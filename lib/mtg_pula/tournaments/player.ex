defmodule MtgPula.Tournaments.Player do
  @moduledoc """
  Represents a player schema.

  This schema is used to store player-related information, such as points, deck, and match history.

  ## Fields

  - `id` (binary_id): The unique identifier for the player (autogenerated).
  - `deck` (string): The deck used by the player.
  - `opponents` (array of UUIDs): The list of opponents the player has faced.
  - `points` (integer): The total points earned by the player.
  - `had_bye` (boolean): Indicates if the player had a bye in any round.
  - `dropped` (boolean): Indicates if the player has dropped out of the tournament.
  - `omw` (float, virtual): Opponent match win percentage.
  - `gw` (float, virtual): Game win percentage.
  - `ogp` (float, virtual): Opponent game percentage.
  - `inserted_at` (utc_datetime): The timestamp when the player was created.
  - `updated_at` (utc_datetime): The timestamp when the player was last updated.

  ## Relationships

  - `belongs_to :tournament`: The tournament the player is participating in. See [`Tournament Schema`](MtgPula.Tournaments.Tournament.html).
  - `belongs_to :user`: The user associated with the player. See [`User Schema`](MtgPula.Users.User.html).
  - `has_many :matches_as_player1`: Matches where the player is player 1. See [`Match Schema`](MtgPula.Tournaments.Match.html).
  - `has_many :matches_as_player2`: Matches where the player is player 2. See [`Match Schema`](MtgPula.Tournaments.Match.html).
  - `has_many :matches_as_winner`: Matches where the player is the winner. See [`Match Schema`](MtgPula.Tournaments.Match.html).

  ## Examples

      # Creating a new player
      attrs = %{deck: "Mono Red Aggro", tournament_id: "tournament_uuid", user_id: "user_uuid"}
      changeset = MtgPula.Tournaments.Player.changeset(%MtgPula.Tournaments.Player{}, attrs)

      if changeset.valid? do
        Repo.insert(changeset)
      else
        IO.inspect(changeset.errors)
      end
  """
  use Ecto.Schema
  import Ecto.Changeset

  @derive {Jason.Encoder,
           only: [
             :id,
             :user_id,
             :tournament_id,
             :points,
             :dropped,
             :deck,
             :opponents,
             :had_bye,
             :omw,
             :gw,
             :ogp
           ]}

  @optional_fields [:id, :inserted_at, :updated_at, :points, :had_bye, :dropped, :omw, :gw, :ogp]
  @primary_key {:id, :binary_id, autogenerate: true}
  @foreign_key_type :binary_id
  schema "players" do
    field :deck, :string
    field :opponents, {:array, Ecto.UUID}, default: []
    field :points, :integer
    field :had_bye, :boolean
    field :dropped, :boolean
    field :omw, :float, virtual: true
    field :gw, :float, virtual: true
    field :ogp, :float, virtual: true
    belongs_to :tournament, MtgPula.Tournaments.Tournament
    belongs_to :user, MtgPula.Users.User
    has_many :matches_as_player1, MtgPula.Tournaments.Match, foreign_key: :player1_id
    has_many :matches_as_player2, MtgPula.Tournaments.Match, foreign_key: :player2_id
    has_many :matches_as_winner, MtgPula.Tournaments.Match, foreign_key: :winner_id
    timestamps(type: :utc_datetime)
  end

  defp all_fields do
    __MODULE__.__schema__(:fields)
  end

  @doc """
  Creates a changeset for a player.

  ## Parameters

  - `player` (struct): The player struct to update.
  - `attrs` (map): A map of attributes to apply to the changeset.

  ## Validations

  - Ensures required fields are present.
  - Enforces unique constraints for user and tournament associations.

  ## Examples

      iex> changeset(%MtgPula.Tournaments.Player{}, %{deck: "Mono Red Aggro"})
      %Ecto.Changeset{...}

      iex> changeset(%MtgPula.Tournaments.Player{}, %{deck: nil})
      %Ecto.Changeset{valid?: false, errors: [deck: {"can't be blank", []}]}
  """
  def changeset(player, attrs) do
    player
    |> cast(attrs, all_fields())
    |> validate_required(all_fields() -- @optional_fields)
    |> foreign_key_constraint(:user_id)
    |> unique_constraint(:user_id, name: :players_user_id_fkey)
    |> unique_constraint([:tournament_id, :user_id], name: :unique_tournament_player)
  end
end
